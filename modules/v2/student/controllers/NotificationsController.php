<?php

namespace app\modules\student\controllers;

use app\models\gradely\TeacherClass;
use app\models\NotificationActionData;
use app\models\TutorSession;
use Yii;

use app\components\GenerateLinks;
use app\components\SendEmail;
use app\components\SendSMS;
use app\components\SendWhatsApp;
use app\models\gradely\InviteLog;
use app\models\gradely\User;
use app\models\Homeworks;
use app\models\InappNotification;
use app\models\NotificationMessages;
use app\models\NotificationOutLogging;
use app\models\Notifications;
use app\models\Parents;
use app\models\StudentSchool;
use yii\web\Controller;

/**
 * Default controller for the `student` module
 */
class DefaultController extends Controller
{
    public $domain;

    public function beforeAction($action)
    {
        $this->domain = Yii::$app->params['domain'];
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Renders the index view for the module
     * @return string
     */
    public function actionIndex(Notifications $model)
    {
//        foreach ($model->notificationMessage as $item) {
//            //echo ($item->action_id . ' - ' . $item->type) . '<br>';
//            Yii::$app->runAction("{$item->type}/index", ['model' => $model]);
//        }

        $actionName = $model->action_name;
        $this->$actionName($model);
    }

    private function welcome_student(Notifications $model)
    {
        $user = User::findOne(['id' => $model->notificationActionDatas[0]->field_value]);

        // For email sending
        if(empty($user->email) == false AND NotificationOutLogging::find()->where(['notification_id' => $model->id, 'notification_type' => 'email', 'status' => 1])->exists() == false) {

            $emailOutLogging = $model->CreateOutLogging($model, $user->id, 'email');
            $email = SendEmail::widget([
                'template' => "student/$model->action_name",
                'subject' => 'Welcome to Gradely!',
                'to' => $user->email,
                'data' => ['user' => $user, 'cta' => GenerateLinks::widget([
                    'destination' => $this->domain . '/site/verify-email?token=' . $user->verification_token,
                    'outingID' => $emailOutLogging->id,
                    'long' => true,
                    'notificationID' => $model->id
                ])]
            ]);
            if ($email)
                $model->UpdateOutLogging($emailOutLogging->id);
        }

        /*================================================
                       In-App Notification
        =================================================*/

        if(NotificationOutLogging::find()->where(['notification_id' => $model->id, 'notification_type' => 'app', 'status' => 1])->exists() == false) {

            $notificationLog = $model->CreateOutLogging($model, $user->id, 'app');

            if($notificationLog) {

                /*Saves to in-app-log*/
                $action_id = $model->notificationActionDatas[0]->action_id;

                $notificationMsg = NotificationMessages::find()->where([
                    'type' => 'app',
                    'action_id' => $action_id
                ])->one();

                $message = str_replace('[Student Name]', $user->lastname .' '. $user->firstname, $notificationMsg->message);


                $inappLog = new InappNotification();
                $inappLog->notification_id = $notificationLog->notification_id;
                $inappLog->out_logging_id = $notificationLog->id;
                $inappLog->user_id = $notificationLog->receiver_id;
                $inappLog->message = $message;
                if($inappLog->save())
                    //Updates the log status to sent
                    $model->UpdateOutLogging($notificationLog->id);
            }
        }



        if (NotificationOutLogging::find()->where(['notification_type' => ['email', 'app'],'status' => 1,'notification_id' => $model->id,])->exists())
            $model->CompleteNotification();
    }

    private function parent_add_student(Notifications $model)
    {

        $invite_model = InviteLog::findOne(['id' => $model->notificationActionDatas[0]->field_value]);

        $receiver = User::findOne(['email' => $invite_model->receiver_email]);


        // For email sending
        $emailOutLogging = $model->CreateOutLogging($model, $receiver->id, 'email');
        $email = SendEmail::widget([
            'template' => "parent/$model->action_name",
            'subject' => 'Welcome to Gradely!',
            'to' => $invite_model->receiver_email,
            'data' => ['model' => $receiver, 'cta' => GenerateLinks::widget([
                'destination' => $this->domain . '/signup/student?token=' . $invite_model->token,
                'outingID' => $emailOutLogging->id,
                'long' => true,
                'notificationID' => $model->id
            ])]
        ]);
        if ($email)
            $model->UpdateOutLogging($emailOutLogging->id);

        /**=====================================
        WhatsApp
        =======================================
         */
        $whatsAppLog = $model->CreateOutLogging($model, $receiver->id, 'whatsapp');
        $whatsAppMsg = NotificationMessages::findOne([
            'type' => 'whatsapp',
            'action_id' => $model->action_id,
        ]);

        if ($whatsAppMsg) {

            $response = SendWhatsApp::widget([
                'receiverPhone' => $invite_model->receiver_phone,
                'message' => $whatsAppMsg->message . GenerateLinks::widget([
                        'destination' => $this->domain . '/signup/student?token=' . $invite_model->token,
                        'outingID' => $whatsAppLog->id,
                        'notificationID' => $model->id
                    ])]);
            if ($response)
                $model->UpdateOutLogging($whatsAppLog->id);
        }


        if (NotificationOutLogging::find()->where(['notification_id' => $model->id, 'status' => 1, 'notification_type' => ['email']])->exists())
            $model->CompleteNotification();
    }

    private function teacher_set_homework_student(Notifications $notification)
    {

        $homework = Homeworks::find()->where([
            'id' => $notification->notificationActionDatas[0]->field_value,
            'publish_status' => 1,
            'access_status' => 'active',
        ])->one();

        $students_homework = StudentSchool::find()->where(['class_id' => $homework->class_id
        ])->all();

        if($homework){

            foreach ($students_homework as $student_homework){

                // For email sending
                $emailOutLogging = $notification->CreateOutLogging($notification, $student_homework->student_id, 'email');
                $email = SendEmail::widget([
                    'template' => "student/$notification->action_name",
                    'subject' => " Hello {$student_homework->student->firstname} , Homework has been created",
                    'to' => $student_homework->student->email,
                    'data' => [
                        'model' => $homework,
                    ]
                ]);
                if ($email)
                    $notification->UpdateOutLogging($emailOutLogging->id);

                /**================================================
                In-App Notification
                =================================================*/

                $notificationLog = $notification->CreateOutLogging($notification, $student_homework->student_id, 'app');

                if($notificationLog) {
                    //Updates the log status to sent
                    $notification->UpdateOutLogging($notificationLog->id);

//                    /*Saves to in-app-log*/
                $action_id = $notification->action_id;

                    $notificationMsg = NotificationMessages::find()->where([
                        'type' => 'app',
                        'action_id' => $action_id
                    ])->one();

                    $inappMsg = str_replace('[Student Name]', $student_homework->student->lastname, $notificationMsg->message);
                    $inappMsg = str_replace('[Homework]', $homework->title, $inappMsg);
                    $inappMsg = str_replace('[Subject]', $homework->subject->name, $inappMsg);


                    $inappLog = new InappNotification();
                    $inappLog->notification_id = $notificationLog->notification_id;
                    $inappLog->out_logging_id = $notificationLog->id;
                    $inappLog->user_id = $notificationLog->receiver_id;
                    $inappLog->message = $inappMsg;
                    $inappLog->save();
                }
                //For sending SMS
                $smsOutLogging = $notification->CreateOutLogging($notification, $student_homework->student_id, 'sms');

                if ($messages = NotificationMessages::findOne(['type' => 'sms', 'action_id' => $action_id])) {

                    $message = str_replace('[Student Name]', $student_homework->student->lastname, $messages->message);
                    $message = str_replace('[Homework]', $homework->title, $message);
                    $message = str_replace('[Subject]', $homework->subject->name, $message);

                    $response = SendSMS::widget(['phone' => $student_homework->student->phone, 'message' => $message]);

                    if ($response == 1000)
                        $notification->UpdateOutLogging($smsOutLogging->id);
                }


                /**=====================================
                WhatsApp
                =======================================
                 */
            $whatsAppLog = $notification->CreateOutLogging($notification, $student_homework->student_id, 'whatsapp');
            $whatsAppMsg = NotificationMessages::findOne([
                'type' => 'whatsapp',
                'action_id' => $action_id,
            ]);

            if ($whatsAppMsg) {

                $message = str_replace('[Student Name]', $student_homework->student->lastname, $whatsAppMsg->message);
                $message = str_replace('[Homework]', $homework->title, $message);
                $message = str_replace('[Subject]', $homework->subject->name, $message);

                $response = SendWhatsApp::widget([
                    'receiverPhone' => $student_homework->student->phone,
                    'receiverMessage' => $message]);

                if ($response)
                    $notification->UpdateOutLogging($whatsAppLog->id);

                if (NotificationOutLogging::find()->where(['notification_type' => ['whatsapp', 'app', 'sms', 'email']])->exists())
                    $notification->CompleteNotification();
            }
        }

        }

    }
    
    private function homework_done_student(Notifications $model){


        $homework = Homeworks::findOne([
            'id' => $model->notificationActionDatas[0]->field_value,
            'status' => 1,
            ]);

        if($homework){

            // For email sending
            $emailOutLogging = $model->CreateOutLogging($model, $homework->student_id, 'email');
            $email = SendEmail::widget([
                'template' => "student/$model->action_name",
                'subject' => " Hello {$homework->student->firstname} , Homework has been completed",
                'to' => $homework->student->email,
                'data' => [
                    'model' => $homework,
                ]
            ]);
            if ($email)
                $model->UpdateOutLogging($emailOutLogging->id);

            /**================================================
            In-App Notification
            =================================================*/

            $notificationLog = $model->CreateOutLogging($model, $homework->student_id, 'app');

            if($notificationLog) {
                //Updates the log status to sent
                $model->UpdateOutLogging($notificationLog->id);

//                    /*Saves to in-app-log*/
                $action_id = $model->action_id;

                $notificationMsg = NotificationMessages::find()->where([
                    'type' => 'app',
                    'action_id' => $action_id
                ])->one();

                $message = str_replace('[Subject Name]', $homework->subject->name, $notificationMsg->message);
                $message = str_replace('[Student Name]', $homework->student->firstname, $message);



                $inappLog = new InappNotification();
                $inappLog->notification_id = $notificationLog->notification_id;
                $inappLog->out_logging_id = $notificationLog->id;
                $inappLog->user_id = $notificationLog->receiver_id;
                $inappLog->message = $message;
                $inappLog->save();
            }
            //For sending SMS
            $smsOutLogging = $model->CreateOutLogging($model, $homework->student_id, 'sms');

            if ($messages = NotificationMessages::findOne(['type' => 'sms', 'action_id' => $action_id])) {

                $message = str_replace('[Subject Name]', $homework->subject->name, $messages->message);
                $message = str_replace('[Student Name]', $homework->student->firstname, $message);


                $response = SendSMS::widget(['phone' => $homework->student->phone, 'message' => $message]);

                if ($response == 1000)
                    $model->UpdateOutLogging($smsOutLogging->id);
            }


            /**=====================================
            WhatsApp
            =======================================
             */
            $whatsAppLog = $model->CreateOutLogging($model, $homework->student_id, 'whatsapp');
            $whatsAppMsg = NotificationMessages::findOne([
                'type' => 'whatsapp',
                'action_id' => $action_id,
            ]);

            if ($whatsAppMsg) {

                $message = str_replace('[Subject Name]', $homework->subject->name, $whatsAppMsg->message);
                $message = str_replace('[Student Name]', $homework->student->firstname, $message);


                $response = SendWhatsApp::widget([
                    'receiverPhone' => $homework->student->phone,
                    'receiverMessage' => $message]);

                if ($response)
                    $model->UpdateOutLogging($whatsAppLog->id);

                if (NotificationOutLogging::find()->where(['notification_type' => ['whatsapp', 'app', 'sms', 'email']])->exists())
                    $model->CompleteNotification();
            }
        }
    }

    private function parent_add_student_code_student(Notifications $model){

        $parent = Parents::find()->where(['student_id' => $model->notificationActionDatas[0]->field_value,
        ])->andWhere(['is not', 'code' , null])->one();

        if($parent){
            // For email sending
            $emailOutLogging = $model->CreateOutLogging($model, $parent->student_id, 'email');
            $email = SendEmail::widget([
                'template' => "student/$model->action_name",
                'subject' => " Join {$parent->inviter} on Gradely.NG",
                'to' => $parent->student->email,
                'data' => [
                    'model' => $parent,]
            ]);
            if ($email)
                $model->UpdateOutLogging($emailOutLogging->id);


            /**================================================
            In-App Notification
            =================================================*/

            $notificationLog = $model->CreateOutLogging($model, $parent->student_id, 'app');

            if($notificationLog) {

                /*Saves to in-app-log*/
                $action_id = $model->action_id;

                $notificationMsg = NotificationMessages::find()->where([
                    'type' => 'app',
                    'action_id' => $action_id
                ])->one();

                $inappMsg = str_replace('[Student Name]', $parent->student->firstname, $notificationMsg->message);
                $inappMsg = str_replace('[Parent Type]', $parent->role, $inappMsg);
                $inappMsg = str_replace('[Parent Name]', $parent->parent->firstname, $inappMsg);


                $inappLog = new InappNotification();
                $inappLog->notification_id = $notificationLog->notification_id;
                $inappLog->out_logging_id = $notificationLog->id;
                $inappLog->user_id = $notificationLog->receiver_id;
                $inappLog->message = $inappMsg;
                if($inappLog->save())
                    //Updates the log status to sent
                    $model->UpdateOutLogging($notificationLog->id);
            }

            //For sending SMS
            $smsOutLogging = $model->CreateOutLogging($model, $parent->student_id, 'sms');

            if ($messages = NotificationMessages::findOne(['type' => 'sms', 'action_id' => $action_id])) {

                $message = str_replace('[Student Name]', $parent->student->firstname, $messages->message);
                $message = str_replace('[Parent Type]', $parent->role, $message);
                $message = str_replace('[Parent Name]', $parent->parent->firstname, $message);

                $response = SendSMS::widget(['phone' => $parent->student->phone, 'message' => $message]);
                if ($response == 1000)
                    $model->UpdateOutLogging($smsOutLogging->id);
            }


            /**=====================================
            WhatsApp
            =======================================
             */
            $whatsAppLog = $model->CreateOutLogging($model, $parent->student_id, 'whatsapp');
            $whatsAppMsg = NotificationMessages::findOne([
                'type' => 'whatsapp',
                'action_id' => $model->action_id,
            ]);

            if ($whatsAppMsg) {

                $message = str_replace('[Student Name]', $parent->student->firstname, $whatsAppMsg->message);
                $message = str_replace('[Parent Type]', $parent->role, $message);
                $message = str_replace('[Parent Name]', $parent->parent->firstname, $message);

                $response = SendWhatsApp::widget([
                    'receiverPhone' => $parent->student->phone,
                    'receiverMessage' => $message ]);
                if ($response)
                    $model->UpdateOutLogging($whatsAppLog->id);
            }

            if (NotificationOutLogging::find()->where(['notification_type' => ['email', 'app', 'sms', 'whatsapp']])->exists())
                $model->CompleteNotification();
        }
    }

    private function teacher_add_student_student(Notifications $notification){

        $data = NotificationActionData::find()->where(['notification_id' => $notification->id])->one();

        $data_value = json_decode($data->field_value, true);

        $students = $data_value['student_id'];

        $teacher_class = TeacherClass::findOne(['teacher_id' => $data_value['teacher_id']]);

        foreach ($students as $student){

        $student_school = StudentSchool::findOne([
            'student_id' => $student,
            'school_id' => $teacher_class->school_id,
        ]);


        // For email sending
        if (NotificationOutLogging::find()->where(['notification_id' => $notification->id, 'notification_type' => 'email', 'status' => 1])->exists() == false) {

            $emailOutLogging = $notification->CreateOutLogging($notification, $student, 'email');
            $email = SendEmail::widget([
                'template' => "student/$notification->action_name",
                'subject' => 'Welcome to Gradely!:: You have been assigned a Class',
                'to' => $student_school->student->email,
                'data' => ['user' => $teacher_class,
                    'dataValue' => $data_value,
                    //'cta' => $this->domain . '/teachers/classes/view-class?class=' . $teacher_class->class_id,
                ]
            ]);
            if ($email)
                $notification->UpdateOutLogging($emailOutLogging->id);
        }

        /**================================================
        In-App Notification
        =================================================*/

        $notificationLog = $notification->CreateOutLogging($notification, $student, 'app');

        if($notificationLog) {
            //Updates the log status to sent
            $notification->UpdateOutLogging($notificationLog->id);
             /*Saves to in-app-log*/
            $action_id = $notification->action_id;

            $notificationMsg = NotificationMessages::find()->where([
                'type' => 'app',
                'action_id' => $action_id
            ])->one();

            $inappMsg = str_replace('[Teacher Name]', $teacher_class->teacher->lastname, $notificationMsg->message);
            $inappMsg = str_replace('[Student Name]', $student_school->student->lastname, $inappMsg);
            $inappMsg = str_replace('[Class Name]', $teacher_class->class->class_name, $inappMsg);


            $inappLog = new InappNotification();
            $inappLog->notification_id = $notificationLog->notification_id;
            $inappLog->out_logging_id = $notificationLog->id;
            $inappLog->user_id = $notificationLog->receiver_id;
            $inappLog->message = $inappMsg;
            $inappLog->save();
        }

        /**=====================================
         * WhatsApp
         * =======================================
         */
        $whatsAppLog = $notification->CreateOutLogging($notification, $student, 'whatsapp');
        $whatsAppMsg = NotificationMessages::findOne([
            'type' => 'whatsapp',
            'action_id' => $action_id,
        ]);

        if ($whatsAppMsg) {

            $message = str_replace('[Teacher Name]', $teacher_class->teacher->lastname, $whatsAppMsg->message);
            $message = str_replace('[Student Name]', $student_school->student->lastname, $message);
            $message = str_replace('[Class Name]', $teacher_class->class->class_name, $message);

            $response = SendWhatsApp::widget([
                'receiverPhone' => $student_school->student->phone,
                'receiverMessage' => $message]);

            if ($response)
                $notification->UpdateOutLogging($whatsAppLog->id);
        }

            if (NotificationOutLogging::find()->where(['notification_type' => ['whatsapp', 'app', 'email']])->exists())
                $notification->CompleteNotification();
    }

    }

    private function homework_due_date_student(Notifications $notification){

        $homeworks = Homeworks::find()->where([
            'publish_status' => 1,
            'access_status' => 'active',
            'status' => 0,
        ])->all();

        foreach ($homeworks as $homework) {

            $student = User::findOne($homework->student_id);

            if(explode(" ", $homework->close_date)[0]  == (date('Y-m-d', strtotime('+2 days')))) {

                // For email sending
                $emailOutLogging = $notification->CreateOutLoggingHomework($notification, $homework->student_id, 'email');
                $email = SendEmail::widget([
                    'template' => "student/$notification->action_name",
                    'subject' => " Hello {$homework->student->firstname}, Payment made",
                    'to' => $homework->student->email,
                    'data' => [
                        'model' => $homework,
                    ]
                ]);
                if ($email)
                    $notification->UpdateOutLogging($emailOutLogging->id);

                /**================================================
                In-App Notification
                =================================================*/

                $notificationLog = $notification->CreateOutLoggingHomework($notification, $homework->student_id, 'app');

                if($notificationLog) {
                    //Updates the log status to sent
                    $notification->UpdateOutLogging($notificationLog->id);

                    /*Saves to in-app-log*/
                    $action_id = $notification->action_id;

                    $notificationMsg = NotificationMessages::find()->where([
                        'type' => 'app',
                        'action_id' => $action_id
                    ])->one();

                    $inappMsg = str_replace('[Student Name]', $homework->student->firstname, $notificationMsg->message);

                    $inappLog = new InappNotification();
                    $inappLog->notification_id = $notificationLog->notification_id;
                    $inappLog->out_logging_id = $notificationLog->id;
                    $inappLog->user_id = $notificationLog->receiver_id;
                    $inappLog->message = $inappMsg;
                    $inappLog->save();
                }

                /**=====================================
                 * WhatsApp
                 * =======================================
                 */
                $whatsAppLog = $notification->CreateOutLoggingHomework($notification, $homework->student_id, 'whatsapp');
                $whatsAppMsg = NotificationMessages::findOne([
                    'type' => 'whatsapp',
                    'action_id' => $action_id,
                ]);

                if ($whatsAppMsg) {

                    $message = str_replace('[Student Name]', $homework->student->lastname, $whatsAppMsg->message);

                    $response = SendWhatsApp::widget([
                        'receiverPhone' => $homework->student->phone,
                        'receiverMessage' => $message]);

                    if ($response)
                        $notification->UpdateOutLogging($whatsAppLog->id);
                }
            }
        }

        if (NotificationOutLogging::find()->where(['notification_type' => ['email', 'app', 'whatsapp'],'status' => 1,'notification_id' => $notification->id,])->exists())
            $notification->CompleteNotification();
    }

    private function homework_expired_student(Notifications $notification){

        $homeworks = Homeworks::find()->where([
            'publish_status' => 1,
            'access_status' => 'active',
            'status' => 0,
        ])->all();

        foreach ($homeworks as $homework) {

            if(date('Y-m-d') == explode(" ", $homework->close_date)[0]) {

                // For email sending
                $emailOutLogging = $notification->CreateOutLoggingHomework($notification, $homework->student_id, 'email');
                $email = SendEmail::widget([
                    'template' => "student/$notification->action_name",
                    'subject' => " Hello, {$homework->title}, Expires today!",
                    'to' => $homework->student->email,
                    'data' => [
                        'model' => $homework,
                        'cta' => GenerateLinks::widget([ //Generates token
                            'destination' => $this->domain . '/students/homework/completed',
                            'outingID' => $emailOutLogging->id,
                            'long' => true,
                            'notificationID' => $notification->id
                        ])
                    ]
                ]);
                if ($email)
                    $notification->UpdateOutLogging($emailOutLogging->id);

                /**================================================
                In-App Notification
                =================================================*/

                $notificationLog = $notification->CreateOutLoggingHomework($notification, $homework->student_id, 'app');

                if($notificationLog) {
                    //Updates the log status to sent
                    $notification->UpdateOutLogging($notificationLog->id);

                    /*Saves to in-app-log*/
                    $action_id = $notification->action_id;

                    $notificationMsg = NotificationMessages::find()->where([
                        'type' => 'app',
                        'action_id' => $action_id
                    ])->one();

                    $inappMsg = str_replace('[Student Name]', $homework->student->firstname, $notificationMsg->message);
                    $inappMsg = str_replace('[Title]', $homework->title, $inappMsg);

                    $inappLog = new InappNotification();
                    $inappLog->notification_id = $notificationLog->notification_id;
                    $inappLog->out_logging_id = $notificationLog->id;
                    $inappLog->user_id = $notificationLog->receiver_id;
                    $inappLog->message = $inappMsg;
                    $inappLog->save();
                }

                /**=====================================
                 * WhatsApp
                 * =======================================
                 */
                $whatsAppLog = $notification->CreateOutLoggingHomework($notification, $homework->student_id, 'whatsapp');
                $whatsAppMsg = NotificationMessages::findOne([
                    'type' => 'whatsapp',
                    'action_id' => $action_id,
                ]);

                if ($whatsAppMsg) {

                    $message = str_replace('[Student Name]', $homework->student->lastname, $whatsAppMsg->message);
                    $message = str_replace('[Title]', $homework->title, $message);

                    $response = SendWhatsApp::widget([
                        'receiverPhone' => $homework->student->phone,
                        'receiverMessage' => $message]);

                    if ($response)
                        $notification->UpdateOutLogging($whatsAppLog->id);
                }
            }
        }

        if (NotificationOutLogging::find()->where(['notification_type' => ['email', 'app', 'whatsapp'],'status' => 1,'notification_id' => $notification->id,])->exists())
            $notification->CompleteNotification();
    }

    private function tutor_session_ended_student(Notifications $notification){

        $session_id = $notification->notificationActionDatas[0];

        $session_tutor = TutorSession::findOne($session_id);

        if($session_tutor->status == 'completed') {
            // For email sending
            $emailOutLogging = $notification->CreateOutLogging($notification, $session_tutor->student_id, 'email');
            $email = SendEmail::widget([
                'template' => "student/$notification->action_name",
                'subject' => "{$session_tutor->title}, has ended!",
                'to' => $session_tutor->student->email,
                'data' => [
                    'model' => $session_tutor,
//                'cta' => GenerateLinks::widget([ //Generates token
//                    'destination' => $this->domain . '/students/homework/completed',
//                    'outingID' => $emailOutLogging->id,
//                    'long' => true,
//                    'notificationID' => $notification->id
//                ])
                ]
            ]);
            if ($email)
                $notification->UpdateOutLogging($emailOutLogging->id);

            /**================================================
            In-App Notification
            =================================================*/

            $notificationLog = $notification->CreateOutLogging($notification, $session_tutor->student_id, 'app');

            if($notificationLog) {
                //Updates the log status to sent
                $notification->UpdateOutLogging($notificationLog->id);

                /*Saves to in-app-log*/
                $action_id = $notification->action_id;

                $notificationMsg = NotificationMessages::find()->where([
                    'type' => 'app',
                    'action_id' => $action_id
                ])->one();

                $inappMsg = str_replace('[Student Name]', $session_tutor->student->firstname, $notificationMsg->message);

                $inappLog = new InappNotification();
                $inappLog->notification_id = $notificationLog->notification_id;
                $inappLog->out_logging_id = $notificationLog->id;
                $inappLog->user_id = $notificationLog->receiver_id;
                $inappLog->message = $inappMsg;
                $inappLog->save();
            }

            /**=====================================
             * WhatsApp
             * =======================================
             */
            $whatsAppLog = $notification->CreateOutLogging($notification, $session_tutor->student_id, 'whatsapp');
            $whatsAppMsg = NotificationMessages::findOne([
                'type' => 'whatsapp',
                'action_id' => $action_id,
            ]);

            if ($whatsAppMsg) {

                $message = str_replace('[Student Name]', $session_tutor->student->lastname, $whatsAppMsg->message);

                $response = SendWhatsApp::widget([
                    'receiverPhone' => $session_tutor->student->phone,
                    'receiverMessage' => $message]);

                if ($response)
                    $notification->UpdateOutLogging($whatsAppLog->id);
            }

            if (NotificationOutLogging::find()->where(['notification_type' => ['email', 'app', 'whatsapp'],'status' => 1,'notification_id' => $notification->id,])->exists())
                $notification->CompleteNotification();
        }
    }

    private function tutor_session_student(Notifications $notification){

        $sessions_tutor = TutorSession::find()->where([
            'category' => 'class',
            'is_school' => 1,
        ])->all();

        foreach ($sessions_tutor as $session_tutor){

            $student = StudentSchool::findOne(['student_id' => $session_tutor->student_id]);

            $student_user = User::findOne(['id' => $student->student_id]);

            if($student_user AND explode(' ', $session_tutor->availability)[0] == date('Y-m-d') AND explode(' ', $session_tutor->availability)[1] > date('H:i:s', strtotime('-10 minutes')) ){

                // For email sending
                $emailOutLogging = $notification->CreateOutLogging($notification, $student->student_id, 'email');
                $email = SendEmail::widget([
                    'template' => "student/$notification->action_name",
                    'subject' => "{$session_tutor->title}, has ended!",
                    'to' => $student_user->email,
                    'data' => [
                        'model' => $session_tutor,
                        'student' => $student_user,
//                'cta' => GenerateLinks::widget([ //Generates token
//                    'destination' => $this->domain . '/students/homework/completed',
//                    'outingID' => $emailOutLogging->id,
//                    'long' => true,
//                    'notificationID' => $notification->id
//                ])
                    ]
                ]);
                if ($email)
                    $notification->UpdateOutLogging($emailOutLogging->id);

                /**================================================
                In-App Notification
                =================================================*/

                $notificationLog = $notification->CreateOutLogging($notification, $student->student_id, 'app');

                if($notificationLog) {
                    //Updates the log status to sent
                    $notification->UpdateOutLogging($notificationLog->id);

                    /*Saves to in-app-log*/
                    $action_id = $notification->action_id;

                    $notificationMsg = NotificationMessages::find()->where([
                        'type' => 'app',
                        'action_id' => $action_id
                    ])->one();

                    $inappMsg = str_replace('[Student Name]', $student_user->firstname, $notificationMsg->message);

                    $inappLog = new InappNotification();
                    $inappLog->notification_id = $notificationLog->notification_id;
                    $inappLog->out_logging_id = $notificationLog->id;
                    $inappLog->user_id = $notificationLog->receiver_id;
                    $inappLog->message = $inappMsg;
                    $inappLog->save();
                }

                /**=====================================
                 * WhatsApp
                 * =======================================
                 */
                $whatsAppLog = $notification->CreateOutLogging($notification, $student->student_id, 'whatsapp');
                $whatsAppMsg = NotificationMessages::findOne([
                    'type' => 'whatsapp',
                    'action_id' => $action_id,
                ]);

                if ($whatsAppMsg) {

                    $message = str_replace('[Student Name]', $student_user->lastname, $whatsAppMsg->message);

                    $response = SendWhatsApp::widget([
                        'receiverPhone' => $student_user->phone,
                        'receiverMessage' => $message]);

                    if ($response)
                        $notification->UpdateOutLogging($whatsAppLog->id);
                }
            }
        }

        if (NotificationOutLogging::find()->where(['notification_type' => ['email', 'app', 'whatsapp'],'status' => 1,'notification_id' => $notification->id,])->exists())
            $notification->CompleteNotification();
    }

}
